Graph from graphology
Heap from heap
{ dijkstra } from graphology-library/shortest-path

maze := getArray2d input
start := findInArray2d(maze, 'S')!
end := findInArray2d(maze, 'E')!
graph := new Graph

directions := 
  . dx: 1, dy: 0
  . dx: 0, dy: 1
  . dx: -1, dy: 0
  . dx: 0, dy: -1

map2d maze, (x, y, value) =>
  return if value is '#'
  graph.addNode `${x},${y},${d}` for d of [0..3]

map2d maze, (x, y, value) =>
  return if value is '#'
  for d of [0..3]
    current := `${x},${y},${d}`
    nx := x + directions[d].dx
    ny := y + directions[d].dy

    graph.addEdge current, `${nx},${ny},${d}`, weight: 1 if maze[ny]![nx] is not '#'
    graph.addEdge current, `${x},${y},${(d-1) %% 4}`, weight: 1000
    graph.addEdge current, `${x},${y},${(d+1) %% 4}`, weight: 1000

calcCost := (nodes: string[]) => 
  for sum i of [0...nodes# - 1]
    nodes[i].split(',').-1 is nodes[i + 1].split(',').-1 ? 1 : 1000

minCost := min for i of [0..3]
  calcCost dijkstra.bidirectional(graph, `${start.x},${start.y},0`, `${end.x},${end.y},${i}`)!

type Distances = Record<string, { cost: number, prevNodes: string[] }>

function getDistances(graph: Graph, start: string)
  distances: Distances := {}

  graph.forEachNode (node) => distances[node] = cost: Infinity, prevNodes: []
  distances[start].cost = 0

  queue := new Heap<{ node: string, cost: number }> (a, b) => a.cost - b.cost
  queue.push { cost: 0, node: start }

  until queue.empty()
    current := queue.pop()!
    continue if distances[current.node].cost < current.cost

    graph.forEachOutEdge current.node, (_key, attrs, source, target) =>
      newCost := distances[source].cost + attrs.weight
      if newCost < distances[target].cost
        distances[target].cost = newCost
        distances[target].prevNodes = [source]
        queue.push { cost: newCost, node: target }
      else if newCost is distances[target].cost
        distances[target].prevNodes.push source
  distances

distances := getDistances graph, `${start.x},${start.y},0`

function recreatePaths(distances: Distances, start: string, end: string): string[][]
  return [[start]] if start is end
  paths: string[][] := []

  for node of distances[end].prevNodes
    subPaths := recreatePaths distances, start, node
    for subPath of subPaths
      paths.push subPath ++ [end]

  return paths

log minCost

[0..3]
  |> .flatMap (dir) => recreatePaths distances, `${start.x},${start.y},0`, `${end.x},${end.y},${dir}`
  |> .filter (path) => calcCost(path) is minCost
  |> flatten
  |> .map .replace /,\d*$/, ''
  |> new Set
  |> .size
  |> log
